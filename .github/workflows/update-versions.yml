name: Update Stream Versions

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write

jobs:
  update-versions:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Checkout bluefin-docs repository
        uses: actions/checkout@v4
        with:
          repository: ublue-os/bluefin-docs
          path: bluefin-docs

      - name: Extract version information and update stream-versions.yml
        id: update-versions
        run: |
          # Create the update script
          cat > update_versions.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          // Function to find the latest changelog for a specific stream
          function findLatestChangelog(changelogsDir, stream) {
            try {
              const files = fs.readdirSync(changelogsDir);
              console.log(`Found ${files.length} total files in changelogs directory`);
              
              const streamFiles = files.filter(file => {
                if (!file.endsWith('.md')) return false;
                
                // Handle different filename patterns:
                // YYYY-MM-DD-stream-YYYYMMDD.md or YYYY-MM-DD-stream.YYYYMMDD.md
                const streamPattern = new RegExp(`-${stream}[-.]`, 'i');
                const datePattern = /^\d{4}-\d{2}-\d{2}-/;
                
                return datePattern.test(file) && streamPattern.test(file);
              });
              
              console.log(`Found ${streamFiles.length} ${stream} changelog files:`, streamFiles);
              
              // Sort by date (assuming YYYY-MM-DD format at start)
              streamFiles.sort((a, b) => {
                const dateA = a.substring(0, 10); // Extract YYYY-MM-DD
                const dateB = b.substring(0, 10);
                return dateB.localeCompare(dateA); // Newest first
              });
              
              return streamFiles.length > 0 ? streamFiles[0] : null;
            } catch (error) {
              console.error(`Error reading changelogs directory: ${error.message}`);
              throw error;
            }
          }

          // Function to extract version information from changelog content
          function extractVersionInfo(content, stream) {
            try {
              const lines = content.split('\n');
              let inMajorPackages = false;
              const versions = {};
              
              console.log(`Parsing changelog for ${stream} stream...`);
              
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                
                // Look for Major packages section
                if (line.includes('### Major packages')) {
                  inMajorPackages = true;
                  console.log('Found Major packages section');
                  continue;
                }
                
                // Exit when we reach another section
                if (inMajorPackages && line.startsWith('###') && !line.includes('Major packages')) {
                  console.log(`Exiting Major packages section at: ${line}`);
                  break;
                }
                
                // Parse version information from table rows
                if (inMajorPackages && line.includes('|') && line.includes('**')) {
                  // Parse table rows like: | **Kernel** | 6.14.11-200 | or | **Kernel** | 6.14.11-200 ➡️ 6.14.11-300 |
                  const match = line.match(/\|\s*\*\*(.*?)\*\*\s*\|\s*(.*?)\s*\|/);
                  if (match) {
                    const component = match[1].toLowerCase().trim();
                    let version = match[2].trim();
                    
                    // Handle version arrows (e.g., "version1 ➡️ version2") - take the newer version
                    if (version.includes('➡️')) {
                      version = version.split('➡️')[1].trim();
                    }
                    
                    // Skip empty versions
                    if (!version || version === '') {
                      continue;
                    }
                    
                    // Map component names to our schema
                    const componentMapping = {
                      'kernel': 'kernel',
                      'gnome': 'gnome',
                      'mesa': 'mesa',
                      'nvidia': 'nvidia'
                    };
                    
                    if (componentMapping[component]) {
                      versions[componentMapping[component]] = version;
                      console.log(`Found ${component}: ${version}`);
                    }
                  }
                }
              }
              
              // Determine base OS based on stream
              const baseMapping = {
                'lts': 'CentOS Stream 10',
                'gts': 'Fedora 41',
                'stable': 'Fedora 42'
              };
              
              versions.base = baseMapping[stream] || 'Unknown';
              
              // Ensure all required fields are present, set empty string for missing ones
              const requiredFields = ['base', 'gnome', 'kernel', 'mesa', 'nvidia'];
              for (const field of requiredFields) {
                if (!versions[field]) {
                  versions[field] = '';
                }
              }
              
              console.log(`Extracted versions for ${stream}:`, versions);
              return versions;
            } catch (error) {
              console.error(`Error extracting version info for ${stream}: ${error.message}`);
              throw error;
            }
          }

          // Main execution
          try {
            const changelogsDir = 'bluefin-docs/changelogs';
            const streamsToUpdate = ['lts', 'gts', 'stable'];
            const streamVersions = {};
            let hasValidUpdates = false;
            
            // Verify changelogs directory exists
            if (!fs.existsSync(changelogsDir)) {
              throw new Error(`Changelogs directory not found: ${changelogsDir}`);
            }
            
            console.log(`Processing changelogs from: ${changelogsDir}`);
            
            for (const stream of streamsToUpdate) {
              console.log(`\\n=== Processing ${stream} stream ===`);
              
              try {
                const latestChangelog = findLatestChangelog(changelogsDir, stream);
                if (!latestChangelog) {
                  console.log(`No changelog found for ${stream} stream`);
                  continue;
                }
                
                console.log(`Found latest changelog for ${stream}: ${latestChangelog}`);
                
                const changelogPath = path.join(changelogsDir, latestChangelog);
                if (!fs.existsSync(changelogPath)) {
                  console.error(`Changelog file does not exist: ${changelogPath}`);
                  continue;
                }
                
                const content = fs.readFileSync(changelogPath, 'utf8');
                if (!content || content.trim().length === 0) {
                  console.error(`Empty changelog file: ${changelogPath}`);
                  continue;
                }
                
                const versionInfo = extractVersionInfo(content, stream);
                
                // Validate that we have meaningful version information
                const hasValidVersions = versionInfo.base && 
                  (versionInfo.gnome || versionInfo.kernel);
                
                if (hasValidVersions) {
                  streamVersions[stream] = versionInfo;
                  hasValidUpdates = true;
                  console.log(`Successfully extracted versions for ${stream}`);
                } else {
                  console.error(`No meaningful version information found for ${stream}`);
                  console.error('Extracted data:', versionInfo);
                }
              } catch (streamError) {
                console.error(`Error processing ${stream} stream: ${streamError.message}`);
                // Continue with other streams even if one fails
                continue;
              }
            }
            
            
            // Read existing YAML to compare
            let existingContent = '';
            const yamlFile = 'public/stream-versions.yml';
            if (fs.existsSync(yamlFile)) {
              existingContent = fs.readFileSync(yamlFile, 'utf8');
            }
            
            // Generate new YAML content
            const timestamp = new Date().toISOString().split('T')[0];
            let yamlContent = '# Stream version information for Bluefin releases\\n';
            yamlContent += '# This file contains the latest version information for each stream\\n';
            yamlContent += '# Data is sourced from the most recent changelogs in ublue-os/bluefin-docs\\n';
            yamlContent += '# Last updated: ' + timestamp + '\\n\\n';
            
            // Ensure consistent ordering of streams
            const orderedStreams = ['lts', 'gts', 'stable'];
            for (const stream of orderedStreams) {
              if (streamVersions[stream]) {
                const versions = streamVersions[stream];
                yamlContent += stream + ':\\n';
                yamlContent += '  base: "' + (versions.base || '') + '"\\n';
                yamlContent += '  gnome: "' + (versions.gnome || '') + '"\\n';
                yamlContent += '  kernel: "' + (versions.kernel || '') + '"\\n';
                yamlContent += '  mesa: "' + (versions.mesa || '') + '"\\n';
                yamlContent += '  nvidia: "' + (versions.nvidia || '') + '"\\n\\n';
              }
            }
            
            const finalContent = yamlContent.trim() + '\\n';
            
            // Only write if content has actually changed
            if (finalContent !== existingContent) {
              fs.writeFileSync(yamlFile, finalContent);
              console.log('\\n=== Updated public/stream-versions.yml ===');
              console.log(finalContent);
              process.exit(0); // Signal success
            } else {
              console.log('No changes detected in version information');
              process.exit(2); // Signal no updates
            }
            
          } catch (error) {
            console.error('Fatal error:', error);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
          EOF

          # Run the update script
          if node update_versions.js; then
            echo "updated=true" >> $GITHUB_OUTPUT
          else
            exit_code=$?
            if [ $exit_code -eq 2 ]; then
              echo "updated=false" >> $GITHUB_OUTPUT
            else
              echo "Script failed with exit code $exit_code"
              exit $exit_code
            fi
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet public/stream-versions.yml; then
            echo "No changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected in public/stream-versions.yml"
            echo "has-changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Display changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          echo "Changes to be committed:"
          git diff public/stream-versions.yml

      - name: Commit and push changes
        if: steps.check-changes.outputs.has-changes == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add public/stream-versions.yml
          git commit -m "chore: update stream versions from latest changelogs

          - Automatically updated from ublue-os/bluefin-docs changelogs
          - Updated at $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          git push